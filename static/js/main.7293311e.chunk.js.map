{"version":3,"sources":["1Layer1.png","2 Layer2.png","3 Layer3.png","4 Layer4.png","5 Mountains.png","6 Sun.png","7 Clouds.png","7 Clouds2.png","8 Stars.png","8 Stars2.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","gsap","fromTo","x","duration","repeat","yoyo","backgroundColor","backgroundImage","y","window","localStorage","clear","location","reload","od","messenger","Fragment","className","src","Layer1","alt","Layer2","Layer3","Layer4","Layer5","Layer6","Layer7","Layer8","Layer9","Layer10","type","onClick","clearLocalStorage","openSDK","closeSDK","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,sXCctBC,E,4LAGjBC,IAAKC,OAAO,UAAW,CAACC,GAAI,IAAK,CAACC,SAAU,GAAID,EAAG,GAAIE,QAAS,EAAGC,MAAK,IACxEL,IAAKC,OAAO,UAAW,CAACC,EAAG,IAAK,CAACC,SAAU,GAAID,GAAI,GAAIE,QAAS,EAAGC,MAAK,IACxEL,IAAKC,OAAO,UAAW,CAACC,GAAI,IAAK,CAACC,SAAU,GAAID,EAAG,GAAIE,QAAS,EAAGC,MAAK,IACxEL,IAAKC,OAAO,UAAW,CAACC,EAAG,IAAK,CAACC,SAAU,GAAID,GAAI,GAAIE,QAAS,EAAGC,MAAK,IACxEL,IAAKC,OAAO,UAAW,CAACC,GAAI,IAAK,CAACC,SAAU,GAAID,EAAG,GAAIE,QAAS,EAAGC,MAAK,IACxEL,IAAKC,OAAO,aAAc,CAACK,gBAAgB,SAAU,CAACH,SAAU,GAAIG,gBAAiB,UAAWC,gBAAgB,mDAAoDH,QAAS,EAAGC,MAAK,IACrLL,IAAKC,OAAO,UAAW,CAACC,GAAI,IAAKM,EAAG,IAAK,CAACL,SAAU,GAAID,EAAG,IAAKM,EAAG,IAAKJ,QAAS,EAAGC,MAAK,M,0CAIzFI,OAAOC,aAAaC,QACpBF,OAAOG,SAASC,W,gCAGhBJ,OAAOK,GAAGC,UAAU,U,iCAGpBN,OAAOK,GAAGC,UAAU,W,+BAGZ,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,aAAaC,IAAKC,IAAQC,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKG,IAAQD,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKI,IAAQF,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKK,IAAQH,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKM,IAAQJ,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKO,IAAQL,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKQ,IAAQN,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKS,IAAQP,IAAI,QAC7C,yBAAKH,UAAU,aAAaC,IAAKU,IAAQR,IAAI,QAC7C,yBAAKH,UAAU,cAAcC,IAAKW,IAAST,IAAI,SAEjD,yBAAKH,UAAU,kBACb,4BAAQa,KAAK,SAASC,QAAS,kBAAI,EAAKC,sBAAxC,oBACA,4BAAQF,KAAK,SAASC,QAAS,kBAAI,EAAKE,YAAxC,YACA,4BAAQH,KAAK,SAASC,QAAS,kBAAI,EAAKG,aAAxC,mB,GAzCuBC,aCFbC,QACW,cAA7B3B,OAAOG,SAASyB,UAEe,UAA7B5B,OAAOG,SAASyB,UAEhB5B,OAAOG,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7293311e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1Layer1.9412e1fa.png\";","module.exports = __webpack_public_path__ + \"static/media/2 Layer2.27ab9de0.png\";","module.exports = __webpack_public_path__ + \"static/media/3 Layer3.c895d068.png\";","module.exports = __webpack_public_path__ + \"static/media/4 Layer4.87910c6a.png\";","module.exports = __webpack_public_path__ + \"static/media/5 Mountains.e293abbf.png\";","module.exports = __webpack_public_path__ + \"static/media/6 Sun.35f209a3.png\";","module.exports = __webpack_public_path__ + \"static/media/7 Clouds.006cdd88.png\";","module.exports = __webpack_public_path__ + \"static/media/7 Clouds2.4705f3f0.png\";","module.exports = __webpack_public_path__ + \"static/media/8 Stars.3071d94a.png\";","module.exports = __webpack_public_path__ + \"static/media/8 Stars2.b9d3ed89.png\";","import React, { Component } from 'react'\nimport Layer1 from './1Layer1.png';\nimport Layer2 from './2 Layer2.png';\nimport Layer3 from './3 Layer3.png';\nimport Layer4 from './4 Layer4.png';\nimport Layer5 from './5 Mountains.png';\nimport Layer6 from './6 Sun.png';\nimport Layer7 from './7 Clouds.png';\nimport Layer8 from './7 Clouds2.png';\nimport Layer9 from './8 Stars.png';\nimport Layer10 from './8 Stars2.png';\nimport './App.css';\nimport gsap from \"gsap\";\n\nexport default class App extends Component {\n\n  componentDidMount(){\n    gsap.fromTo(\".layer1\", {x: -10}, {duration: 15, x: 50, repeat: -1, yoyo:true});\n    gsap.fromTo(\".layer2\", {x: 50}, {duration: 15, x: -10, repeat: -1, yoyo:true});\n    gsap.fromTo(\".layer3\", {x: -10}, {duration: 15, x: 50, repeat: -1, yoyo:true});\n    gsap.fromTo(\".layer4\", {x: 50}, {duration: 15, x: -10, repeat: -1, yoyo:true});\n    gsap.fromTo(\".layer5\", {x: -10}, {duration: 15, x: 50, repeat: -1, yoyo:true});\n    gsap.fromTo(\".container\", {backgroundColor:'white'}, {duration: 25, backgroundColor: '#a4508b', backgroundImage:'linear-gradient(326deg, #a4508b 0%, #5f0a87 74%)', repeat: -1, yoyo:true});\n    gsap.fromTo(\".layer6\", {x: -200, y: 50}, {duration: 25, x: 100, y: 300, repeat: -1, yoyo:true});\n  }\n\n  clearLocalStorage() {\n    window.localStorage.clear();\n    window.location.reload();\n  }\n  openSDK() {\n    window.od.messenger(\"open\");\n  }\n  closeSDK() {\n    window.od.messenger(\"close\");\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className='container'>\n          <img className='img layer1' src={Layer1} alt='img'></img>\n          <img className='img layer2' src={Layer2} alt='img'></img>\n          <img className='img layer3' src={Layer3} alt='img'></img>\n          <img className='img layer4' src={Layer4} alt='img'></img>\n          <img className='img layer5' src={Layer5} alt='img'></img>\n          <img className='img layer6' src={Layer6} alt='img'></img>\n          <img className='img layer7' src={Layer7} alt='img'></img>\n          <img className='img layer8' src={Layer8} alt='img'></img>\n          <img className='img layer9' src={Layer9} alt='img'></img>\n          <img className='img layer10' src={Layer10} alt='img'></img>\n        </div>\n        <div className='action-buttons'>\n          <button type=\"button\" onClick={()=>this.clearLocalStorage()}>Open New Session</button>\n          <button type=\"button\" onClick={()=>this.openSDK()}>Open SDK</button>\n          <button type=\"button\" onClick={()=>this.closeSDK()}>Close SDK</button>\n        </div>\n      </React.Fragment>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}